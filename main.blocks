<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="].N!tD8#u{NRxjG:f4*Y" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="}LVo=56oAga5Sf|FqxPJ" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace microbit_car {" line1="" line2="    const PWM_ADD = 0x01" line3="    const MOTOR = 0x02" line4="    const RGB = 0x03" line5="" line6="    export enum CarState {" line7="        //% blockId=&quot;Car_Run&quot; block=&quot;Run&quot;" line8="        Car_Run = 1," line9="        //% blockId=&quot;Car_Back&quot; block=&quot;Back&quot;" line10="        Car_Back = 2," line11="        //% blockId=&quot;Car_Left&quot; block=&quot;Left&quot;" line12="        Car_Left = 3," line13="        //% blockId=&quot;Car_Right&quot; block=&quot;Right&quot;" line14="        Car_Right = 4," line15="        //% blockId=&quot;Car_Stop&quot; block=&quot;Stop&quot;" line16="        Car_Stop = 5," line17="        //% blockId=&quot;Car_SpinLeft&quot; block=&quot;SpinLeft&quot;" line18="        Car_SpinLeft = 6," line19="        //% blockId=&quot;Car_SpinRight&quot; block=&quot;SpinRight&quot;" line20="        Car_SpinRight = 7" line21="    }" line22="" line23="    function setPwmMotor(mode: number, speed1: number, speed2: number): void {" line24="        if (mode &lt; 0 || mode &gt; 6)" line25="            return;" line26="" line27="        let buf = pins.createBuffer(5);" line28="        buf[0] = MOTOR;" line29="        switch (mode) {" line30="            case 0: buf[1] = 0; buf[2] = 0; buf[3] = 0; buf[4] = 0; break;              //stop" line31="            case 1: buf[1] = speed1; buf[2] = 0; buf[3] = speed2; buf[4] = 0; break;    //run" line32="            case 2: buf[1] = 0; buf[2] = speed1; buf[3] = 0; buf[4] = speed2; break;    //back" line33="            case 3: buf[1] = 0; buf[2] = 0; buf[3] = speed2; buf[4] = 0; break;         //left" line34="            case 4: buf[1] = speed1; buf[2] = 0; buf[3] = 0; buf[4] = 0; break;         //right" line35="            case 5: buf[1] = 0; buf[2] = speed1; buf[3] = speed2; buf[4] = 0; break;    //tleft" line36="            case 6: buf[1] = speed1; buf[2] = 0; buf[3] = 0; buf[4] = speed2; break;    //tright" line37="        }" line38="        pins.i2cWriteBuffer(PWM_ADD, buf);" line39="    }" line40="" line41="    function Car_run(speed1: number, speed2: number) {" line42="" line43="" line44="        setPwmMotor(1, speed1, speed2);" line45="    }" line46="" line47="    function Car_back(speed1: number, speed2: number) {" line48="" line49="        setPwmMotor(2, speed1, speed2);" line50="    }" line51="" line52="    function Car_left(speed1: number, speed2: number) {" line53="" line54="        setPwmMotor(3, speed1, speed2);" line55="    }" line56="" line57="    function Car_right(speed1: number, speed2: number) {" line58="" line59="        setPwmMotor(4, speed1, speed2);" line60="    }" line61="" line62="    function Car_stop() {" line63="" line64="        setPwmMotor(0, 0, 0);" line65="    }" line66="" line67="    function Car_spinleft(speed1: number, speed2: number) {" line68="" line69="        setPwmMotor(5, speed1, speed2);" line70="    }" line71="" line72="    function Car_spinright(speed1: number, speed2: number) {" line73="" line74="        setPwmMotor(6, speed1, speed2);" line75="    }" line76="    //% blockId=Tinybit_CarCtrl block=&quot;CarCtrl|%index&quot;" line77="    //% weight=93" line78="    //% blockGap=10" line79="    //% color=&quot;#006400&quot;" line80="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=10" line81="    export function CarCtrl(index: CarState): void {" line82="        switch (index) {" line83="            case CarState.Car_Run: Car_run(255, 255); break;" line84="            case CarState.Car_Back: Car_back(255, 255); break;" line85="            case CarState.Car_Left: Car_left(255, 255); break;" line86="            case CarState.Car_Right: Car_right(255, 255); break;" line87="            case CarState.Car_Stop: Car_stop(); break;" line88="            case CarState.Car_SpinLeft: Car_spinleft(255, 255); break;" line89="            case CarState.Car_SpinRight: Car_spinright(255, 255); break;" line90="        }" line91="    }" line92="}" numlines="93"></mutation></block></statement></block></xml>